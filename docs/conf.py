""" Configuration file for the Sphinx documentation builder."""
import doctest
import os
import sys

import alteia

# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

sys.path.insert(0, os.path.abspath('../'))

# -- Project information -----------------------------------------------------

project = 'Python SDK'
copyright = '2022, Alteia'
author = 'Alteia Backend Team'

version = alteia.__version__
release = alteia.__version__

html_logo = "images/alteia-logo.svg"

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.napoleon',
    'sphinx.ext.autodoc',
    'sphinx.ext.coverage',
    'sphinx.ext.doctest',
    'sphinx_autodoc_typehints',
    'recommonmark',
    ]

# Prepare for skipping tests depending on plantcounting
doctest_global_setup = '''
try:
    import plantcounting
except ImportError:
    plantcounting = None

import alteia
sdk = alteia.SDK(user='admin1', password='password',
                 url='https://127.0.0.1:2999')

sdk.datasets.create_datasets([{'name': 'My image', 'type': 'image',
                               'components': [{'name': 'image'}]}])
'''


doctest_default_flags = (0
                         | doctest.ELLIPSIS
                         | doctest.NORMALIZE_WHITESPACE)

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = {
    '.rst': 'restructuredtext',
    '.md': 'markdown',
}

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# Do not display full module name in the Reference page
# ex: display ProjectsImpl instead of
# alteia.apis.client.projectmngt.projectsimpl.ProjectsImpl
add_module_names = False

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'alabaster'

html_favicon = 'images/favicon.ico'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {'fixed_sidebar': True}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = []

html_static_path = ['css']

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_css_files = ['style.css']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {'*': ['first_steps.html',
#                        'configuration.html',
#                        'reference.html',
#                        'search.html']}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'alteiadoc'

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
    }

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'alteia.tex', 'Alteia Python SDK Documentation',
     'Alteia Backend Team', 'manual'),
    ]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'alteia', 'Alteia Python SDK Documentation',
     [author], 1)
    ]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'alteia', 'Alteia Python SDK Documentation',
     author, 'alteia', 'One line description of project.',
     'Miscellaneous'),
    ]

# -- Extension configuration -------------------------------------------------
